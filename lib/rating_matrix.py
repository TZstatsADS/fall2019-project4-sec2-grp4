# -*- coding: utf-8 -*-
"""rating_matrix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TitTHoQpDmdriCFr_dxcHkp_RF15o4nO
"""

import numpy as np
import pandas as pd
import warnings
import io
from google.colab import files

uploaded = files.upload()

movie_main = pd.read_csv('movies.csv', error_bad_lines = False, header = 0, usecols = [0,1,2], index_col = 0, names = ['movieId', 'title','genres'])
movie_main.head()

movie_main.describe()

movie_ratings = pd.read_csv('ratings.csv', error_bad_lines = False, usecols = [0,1,2,3], header = 0, names = ['userId','movieId', 'rating', 'timestamp'])
movie_ratings.head()

movie_ratings.describe()

links = pd.read_csv('links.csv', error_bad_lines = False, usecols = [0,1,2], header = 0, names = ['movieId', 'imdbId', 'tmdbId'])
links.head()

links.describe()

tags = pd.read_csv('tags.csv', error_bad_lines = False, usecols = [0,1,2,3], header = 0, names = ['userId','movieId', 'tag', 'timestamp'])
tags.head()

tags.describe()

def titleLink(movieId):
  title = movie_main.at[movieId, 'title']
  return title

def genresLink(movieId):
  genres = movie_main.at[movieId, 'genres']
  return genres

def timestampLink(movieId):
  timestamp = movie_ratings.at[movieId, 'timestamp']
  return timestamp

def count_matching(condition, sequence):
  return sum(1 for item in sequence if condition(item))
#title, genres, timestamp, count_matching functions

movie_new = pd.merge(movie_main, movie_ratings, on = 'movieId', how = 'right')
movie_new = movie_new[['userId', 'movieId', 'title', 'rating', 'genres', 'timestamp']]
movie_new_sorted = movie_new.sort_values(['userId', 'rating', 'movieId'], ascending = [True, False, True], inplace = False, na_position = 'last')
movie_new_sorted.head(200)
#userId ascend, rating descend, movieId ascend order

pd.pivot_table(movie_new_sorted, index = ['userId'], columns = ['movieId'], values = 'rating')